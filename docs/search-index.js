var searchIndex = JSON.parse('{\
"counting_pointer":{"doc":"`counting-pointer` provides structs `Sc` and `Asc` . They…","i":[[3,"Asc","counting_pointer","A thread-safe strong reference-counting pointer. \'Asc\'…",null,null],[3,"Sc","","A single-threaded strong reference-counting pointer. \'Sc\'…",null,null],[11,"new","","Creates a new instance.",0,[[]]],[11,"from_slice_and_alloc","","Creates a new instance of `Asc<[T], A>` .",0,[[],["asc",3]]],[11,"new_any","","Creates `Asc<dyn Any>` instance.",0,[[]]],[11,"to_any","","Consumes `this`, returning `Asc<dyn Any, A>`",0,[[],[["any",8],["asc",3]]]],[11,"as_ptr","","Provides a raw pointer to the data.",0,[[]]],[11,"count","","Returns the number of `Asc` pointers pointing to the same…",0,[[]]],[11,"get_mut","","Returns a mutable reference into the given `Asc` , if no…",0,[[],["option",4]]],[11,"ptr_eq","","Returns `true` if the two `Asc` instances point to the…",0,[[]]],[11,"make_mut","","Makes a mutable reference into the given `Asc` .",0,[[]]],[11,"downcast","","Attempts to downcast the `Asc<dyn Any, A>` to a concrete…",0,[[],[["asc",3],["result",4]]]],[11,"new","","Creates a new instance.",1,[[]]],[11,"from_slice_and_alloc","","Creates a new instance of `Sc<[T], A>` .",1,[[],["sc",3]]],[11,"new_any","","Creates `Sc<dyn Any>` instance.",1,[[]]],[11,"to_any","","Consumes `this`, returning `Sc<dyn Any, A>`",1,[[],[["sc",3],["any",8]]]],[11,"as_ptr","","Provides a raw pointer to the data.",1,[[]]],[11,"count","","Returns the number of `Sc` pointers pointing to the same…",1,[[]]],[11,"get_mut","","Returns a mutable reference into the given `Sc` , if no…",1,[[],["option",4]]],[11,"ptr_eq","","Returns `true` if the two `Sc` instances point to the same…",1,[[]]],[11,"make_mut","","Makes a mutable reference into the given `Sc` .",1,[[]]],[11,"downcast","","Attempts to downcast the `Sc<dyn Any, A>` to a concrete…",1,[[],[["result",4],["sc",3]]]],[11,"from","","",0,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"drop","","",0,[[]]],[11,"drop","","",1,[[]]],[11,"as_ref","","",0,[[]]],[11,"as_ref","","",1,[[]]],[11,"from","","",0,[[]]],[11,"from","","",0,[[]]],[11,"from","","",1,[[]]],[11,"from","","",1,[[]]],[11,"clone","","",0,[[]]],[11,"clone","","",1,[[]]],[11,"default","","",0,[[]]],[11,"default","","",1,[[]]],[11,"cmp","","",0,[[],["ordering",4]]],[11,"cmp","","",1,[[],["ordering",4]]],[11,"eq","","",0,[[]]],[11,"eq","","",1,[[]]],[11,"partial_cmp","","",0,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",1,[[],[["ordering",4],["option",4]]]],[11,"deref","","",0,[[]]],[11,"deref","","",1,[[]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"hash","","",0,[[]]],[11,"hash","","",1,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow","","",1,[[]]]],"p":[[3,"Asc"],[3,"Sc"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);